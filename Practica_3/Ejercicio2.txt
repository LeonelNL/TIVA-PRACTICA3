#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/adc.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include <math.h>

char dato[13];
uint32_t i = 0;
uint32_t ui32Status;
uint16_t Centenas, Decenas, Unidades;
float PuntoDecenas, PuntoUnidades, PuntoDecimal1, PuntoDecimal2, DecimalRedondeado, DecimalRedondeado2;
float Numero1;

void ConfigUART()
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
                        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));

    IntMasterEnable(); //enable processor interrupts
    IntEnable(INT_UART0); //enable the UART interrupt
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT); //only enable RX and TX interrupts
}


void UARTIntHandler(void)
{

    ui32Status = UARTIntStatus(UART0_BASE, true); //get interrupt status
    UARTIntClear(UART0_BASE, ui32Status); //clear the asserted interrupts

    while(UARTCharsAvail(UART0_BASE)) //loop while there are chars
    {
        for(i = 0; i < 13; i++)
        {
        dato[i] = UARTCharGetNonBlocking(UART0_BASE);
        SysCtlDelay(SysCtlClockGet() / (1000 * 3));
        }
        Centenas = (dato[0] - '0') * 100;
        Decenas = (dato[1] - '0') * 10;
        Unidades = dato[2] - '0';
        PuntoDecimal1 = (dato[4] - '0');
        PuntoDecimal2 = (dato[5] - '0');
        PuntoDecenas = roundf(PuntoDecimal1);
        PuntoUnidades = roundf(PuntoDecimal2);
        DecimalRedondeado = PuntoDecenas * 0.1;
        DecimalRedondeado2 = PuntoUnidades * 0.01;
        Numero1 = Centenas + Decenas + Unidades + (dato[3] - '0') + PuntoDecimal1 + PuntoDecimal2;
    }
}

int main(void)
{
    ConfigUART();

    while(1)
    {
    }
}
